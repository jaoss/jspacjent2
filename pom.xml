<?xml version="1.0" encoding="UTF-8"?>
<project 
     xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation=
       "http://maven.apache.org/POM/4.0.0 
       http://maven.apache.org/maven-v4_0_0.xsd">
       
	<modelVersion>4.0.0</modelVersion>
	
	<!--
	<parent>
		<groupId></groupId>
		<artifactId></artifactId>
		<version></version>
	</parent>
	-->
  
  <repositories>
  <!--These are needed for Swing/Netbeans -->
    <repository>
       <id>maven2-repository.netbeans.maven2</id>
       <name>Netbeans Maven Repository</name>
       <url>http://bits.netbeans.org/maven2/</url>
       <layout>default</layout>
    </repository>  
  </repositories>

  <artifactId>jspacjent2</artifactId>
  <groupId>pl.jasox</groupId>
	<name>JSPacjent2</name>
  <version>0.0.1</version>
	<packaging>jar</packaging>
  
  <properties>		
		<!--
    <projectGroup>jspacjent2</projectGroup> 
		<projectName>JSPacjent2</projectName>
		<projectVersion>0.0.0</projectVersion>
    -->
		<projectScope>compile</projectScope>
		<surefire.version>2.13</surefire.version>		
			
	</properties>

	<dependencies>
	
	  <!-- 
    Mixing JUnit and TestNG in one module can be done just by adding both  
    as a plugin dependencies (not only as project dependencies): 
	  -->
	  <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>6.8</version>
      <scope>test</scope>
    </dependency>
	  
	
	  <dependency>
       <groupId>org.hamcrest</groupId>
       <artifactId>hamcrest-all</artifactId>
       <version>1.1</version>
       <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <version>3.2</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.9.5</version>
      <scope>test</scope>
    </dependency>

	    
    <!-- Swing reference --> 
    <dependency>
       <groupId>org.swinglabs</groupId>
       <artifactId>swing-layout</artifactId>
       <version>1.0.3</version>       
    </dependency>
    
    <dependency>
      <groupId>org.netbeans.external</groupId>
      <artifactId>AbsoluteLayout</artifactId>
      <version>RELEASE68</version>          
    </dependency>
    
    <!-- Spring reference --> 
    <dependency>
	     <groupId>org.springframework</groupId>
	     <artifactId>spring</artifactId>
     	 <version>1.2.4</version>       
    </dependency>
    
    <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-mock</artifactId>
	    <version>1.2.4</version>      
    </dependency> 
    
    <!--  
    <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-hibernate</artifactId>
	    <version>1.2.4</version>      
    </dependency>  
    -->
                    
    <!-- HSQL database driver -->
	  <dependency> 
	    <groupId>org.hsqldb</groupId>  
	    <artifactId>hsqldb</artifactId>  
	    <version>1.8.0.7</version>
	    <scope>runtime</scope> 
	  </dependency>
    
    <!-- MySQL database driver -->
    <dependency>
		 <groupId>mysql</groupId> 
		 <artifactId>mysql-connector-java</artifactId> 
		 <version>5.1.5</version>  
		 <scope>runtime</scope>
    </dependency>     
    
     <!-- c3p0 connection management -->
    <dependency> 
      <groupId>c3p0</groupId> 
      <artifactId>c3p0</artifactId> 
      <version>0.9.1.2</version> 
      <scope>runtime</scope>
    </dependency>
    
    <!-- p6spy connection management -->
    <dependency>
	    <groupId>p6spy</groupId>
	    <artifactId>p6spy</artifactId>
	    <version>1.3</version>
      <scope>runtime</scope>
    </dependency>            
          
     <!-- DBCP connection management --> 
    <dependency>
	    <groupId>commons-dbcp</groupId>
	    <artifactId>commons-dbcp</artifactId>
	    <version>1.2.2</version>
      <scope>runtime</scope>
    </dependency>     
    
    <!-- Hibernate reference --> 
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate</artifactId>
			<version>3.0.5</version>			
			<scope>${projectScope}</scope>
		</dependency>
		
    <!--
		<dependency>     
		  <groupId>org.hibernate</groupId>     
		  <artifactId>hibernate-c3p0</artifactId>     
		  <version>3.0.5</version> 
		  <scope>${projectScope}</scope>
		</dependency>	    
		-->
		
		<dependency> 
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jcl</artifactId>
      <version>1.5.2</version>
      <scope>${projectScope}</scope>
    </dependency>
    
    <dependency>          
      <groupId>log4j</groupId>          
      <artifactId>log4j</artifactId>          
      <version>1.2.12</version>                    
    </dependency>
    
    
	</dependencies>

	<build>
	
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>			 
      <resource> 
        <directory>src/main/java</directory> 
        <includes> 
          <include>**/*.xml</include> 
          <include>**/*.properties</include>
        </includes> 
      </resource>				
		</resources>


		<plugins>      
		
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>		
        <version>2.6</version>		
				<executions>
				  <execution>
					<id>copy-resources</id>
					<!-- here the phase you need -->
					<phase>validate</phase>
					<goals>
						<goal>copy-resources</goal>
					</goals>
					<configuration>
						<outputDirectory>${project.build.directory}/classes</outputDirectory>						 
						<resources>
						<!--	-->	
						</resources>
						<encoding>UTF-8</encoding>						
					</configuration>
				  </execution>
				</executions>
			</plugin>
			
			<!--@author : Marcin Zajączkowski
          How to use TestNG with JUnit together? 
          TestNG has a few features which are unavailable or less flexible in JUnit 
          (just to mention a few: dependencies between tests and groups of tests 
          (irreplaceable for integration tests with long startup), parametrized tests, 
          concurrent execution or per suite/group/class init/shutdown operations). 
          Therefore it is tempting to migrate existing tests from JUnit to TestNG. 
          Having large code base it could be not so easy to migrate all of them at once 
          and presented configuration allows to write the new tests in TestNG and rewrite 
          the old tests when appropriate.
          Btw, it is worth to mention that thanks to the fact TestNG generates reports also in 
          the JUnit’s XML format all the tools compatible with JUnit (Jenkins, Sonar, …) 
          will merge test results from JUnit and TestNG and display all of them properly. -->        
      
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire.version}</version>
        <dependencies>
          <dependency>
              <groupId>org.apache.maven.surefire</groupId>
              <artifactId>surefire-junit47</artifactId>
              <version>${surefire.version}</version>
          </dependency>
          <!--  
          <dependency>
              <groupId>org.apache.maven.surefire</groupId>
              <artifactId>surefire-testng</artifactId>
              <version>${surefire.version}</version>
          </dependency>
          -->
        </dependencies>
			</plugin>			
		    
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
         <source>1.6</source>
         <target>1.6</target>
        </configuration>
      </plugin>
      
      <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
				<configuration>
					<archive>
						<manifest>              
              <addClasspath>false</addClasspath>
							<mainClass>okl.jspacjent.guiswing.JPacjentMDIApplication</mainClass>
						</manifest>
					</archive>
				</configuration>        
			</plugin>
      
      <!--  
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.4</version> 
          <executions>
            <execution>
               <goals>
                 <goal>attached</goal>
               </goals>
               <phase>package</phase>
               <configuration>
                 <descriptorRefs>
                   <descriptorRef>jar-with-dependencies</descriptorRef>
                </descriptorRefs>
                <archive>
                  <manifest>
                    <mainClass>okl.jspacjent.guiswing.JPacjentMDIApplication</mainClass>
                  </manifest>
                </archive>
              </configuration>
           </execution>
        </executions>              
      </plugin>
      -->
      
		</plugins>
		
	</build>
	
	<scm>
		<connection>scm:git:git://github.com/jaoss/jspacjent2.git</connection>
		<developerConnection>
        scm:git:git@github.com:jaoss/jspacjent2.git
    </developerConnection>
		<url>http://github.com/jaoss/jspacjent2</url>
	</scm>
	
	<developers>

		<developer>
			<id>jaoss</id>
			<name>Jan Osowski</name>
			<email>jan.osowski@gmail.com</email>
			<url></url>
			<organization>jasox.pl</organization>
			<organizationUrl></organizationUrl>
			<roles>
			  <role>Developer</role>
			  <role>Architect</role>
			</roles>
			<timezone>-1</timezone>
			<properties>
			  <picUrl></picUrl>
			</properties>
		</developer>
		
		<developer>
			<id>jasox</id>
			<name>Janusz Janowski</name>
			<email>jasox@gazeta.pl</email>
			<url></url>
			<organization>jasox.pl</organization>
			<organizationUrl></organizationUrl>
			<roles>
			  <role>Developer</role>
			  <role>Architect</role>
			</roles>
			<timezone>-1</timezone>
			<properties>
			  <picUrl></picUrl>
			</properties>
		</developer>

  </developers>
  
	<issueManagement>
    <system>Bugzilla</system>
    <url>http://www.bugheaven.com/bugzilla/jasox/</url>
  </issueManagement>
  
	<profiles>
	  <profile>
			  <!-- MySQL runs on the same workstation -->
				<id>local_MySQL</id>	
				<activation>
           <activeByDefault>true</activeByDefault>
        </activation>		
	      <properties>				
					<dbName>MySQL</dbName> 
					<dbHost>localhost</dbHost>
			    <dbUser>jasox</dbUser>
			    <dbSchema>jspacjent</dbSchema>
			    <dbPassword>jasox</dbPassword>					
				</properties>		
		 </profile>
			
		 <profile>
			  <!-- MySQL runs on remote server CloudBees on AWS -->
				<id>aws_MySQL</id>			
	      <properties>
	        <dbName>MySQL</dbName> 
					<dbHost>ec2-50-19-213-178.compute-1.amazonaws.com</dbHost>
			    <dbUser>jasox</dbUser>
			    <dbSchema>jasox-mysql</dbSchema>
			    <dbPassword>jasox-01</dbPassword>							
				</properties>			
		 </profile>
	 
	 </profiles>
	 
	 		
</project>
