<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation=
       "http://maven.apache.org/POM/4.0.0
       http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

	<!--
	<parent>
		<groupId></groupId>
		<artifactId></artifactId>
		<version></version>
	</parent>
	-->

  <repositories>

  <!-- These are needed for Swing/Netbeans -->
    <repository>
      <id>maven2-repository.netbeans.maven2</id>
      <name>Netbeans Maven Repository</name>
      <url>http://bits.netbeans.org/maven2/</url>
      <layout>default</layout>
    </repository>

    <!-- These are needed for CloudBees Jenkins instance -->
    <repository>
      <id>jboss-public-repository-group</id>
      <name>JBoss Public Maven Repository Group</name>
      <url>http://repository.jboss.org/nexus/content/groups/public/</url>
      <layout>default</layout>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
        <updatePolicy>never</updatePolicy>
      </snapshots>
    </repository>

    <!-- These are needed for CloudBees Jenkins instance -->
    <repository>
      <id>nuxeo-public-repository-group</id>
      <name>Nuxeo Public Maven Repository Group</name>
      <url>https://maven.nuxeo.org/nexus/content/groups/public/</url>
      <layout>default</layout>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
        <updatePolicy>never</updatePolicy>
      </snapshots>
    </repository>

     <!-- These are needed for CloudBees Jenkins instance -->
    <repository>
      <id>java.net-repository</id>
      <name>Java.net Repository for Maven</name>
      <url>http://download.java.net/maven/2/</url>
      <layout>default</layout>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
        <updatePolicy>never</updatePolicy>
      </snapshots>
    </repository>

     <!-- These are needed for CloudBees Jenkins instance -->
    <repository>
      <id>jboss-deprecated-repository</id>
      <name>JBoss Deprecated Maven Repository</name>
      <url>http://repository.jboss.org/nexus/content/repositories/deprecated/</url>
      <layout>default</layout>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
        <updatePolicy>never</updatePolicy>
      </snapshots>
    </repository>

  </repositories>


  <pluginRepositories>

     <!-- These are needed for CloudBees Jenkins instance -->
    <pluginRepository>
      <id>jboss-public-repository-group</id>
      <name>JBoss Public Maven Repository Group</name>
      <url>http://repository.jboss.org/nexus/content/groups/public/</url>
      <layout>default</layout>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
        <updatePolicy>never</updatePolicy>
      </snapshots>
    </pluginRepository>

  </pluginRepositories>


  <!-- ===================================================================== -->

  <artifactId>jspacjent2</artifactId>
  <groupId>pl.jasox</groupId>
  <name>JSPacjent2</name>
  <version>0.0.1</version>
  <packaging>jar</packaging>

  <properties>
		<!--
    <projectGroup>pl.jasox</projectGroup>
		<projectName>JSPacjent2</projectName>
		<projectVersion>0.0.1</projectVersion>
    -->
    <projectScope>compile</projectScope>

    <surefire.version>2.13</surefire.version>
    <project.build.sourceEncoding>Cp1250</project.build.sourceEncoding>
    <fake-hsql-file>
      ${project.build.testSourceDirectory}/resources/${test.databaseFile}
    </fake-hsql-file>
    <fake-test-hsql-file>
      ${project.build.testOutputDirectory}/${test.databaseFile}
    </fake-test-hsql-file>
		<!-- do testów filtrowania z zachowaniem odpowiedniego kodowania -->
    <projectOwner>Janusz Swół - (POM)</projectOwner>

  </properties>

  <!-- ===================================================================== -->

  <dependencies>

	  <!--
    Mixing JUnit and TestNG in one module can be done just by adding both
    as a plugin dependencies (not only as project dependencies):
	  -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>6.8</version>
      <scope>test</scope>
    </dependency>


    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>1.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <version>3.2</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.9.5</version>
      <scope>test</scope>
    </dependency>


    <!-- Swing reference -->
    <dependency>
      <groupId>org.swinglabs</groupId>
      <artifactId>swing-layout</artifactId>
      <version>1.0.3</version>
    </dependency>

    <dependency>
      <groupId>org.netbeans.external</groupId>
      <artifactId>AbsoluteLayout</artifactId>
      <version>RELEASE68</version>
    </dependency>

    <!-- Spring reference -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring</artifactId>
      <version>1.2.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-mock</artifactId>
      <version>1.2.4</version>
    </dependency>

    <!--
    <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-hibernate</artifactId>
	    <version>1.2.4</version>
    </dependency>
    -->

    <!-- HSQL database driver -->
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>2.2.7</version>
      <scope>runtime</scope>
    </dependency>

    <!-- MySQL database driver -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.5</version>
      <scope>runtime</scope>
    </dependency>

     <!-- c3p0 connection management -->
    <dependency>
      <groupId>c3p0</groupId>
      <artifactId>c3p0</artifactId>
      <version>0.9.1.2</version>
      <scope>runtime</scope>
    </dependency>

    <!-- p6spy connection management -->
    <dependency>
      <groupId>p6spy</groupId>
      <artifactId>p6spy</artifactId>
      <version>1.3</version>
      <scope>runtime</scope>
    </dependency>

     <!-- DBCP connection management -->
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.2.2</version>
      <scope>runtime</scope>
    </dependency>

    <!-- Hibernate reference -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate</artifactId>
      <version>3.0.5</version>
      <scope>${projectScope}</scope>
    </dependency>

    <!--
		<dependency>
		  <groupId>org.hibernate</groupId>
		  <artifactId>hibernate-c3p0</artifactId>
		  <version>3.0.5</version>
		  <scope>${projectScope}</scope>
		</dependency>
		-->

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jcl</artifactId>
      <version>1.5.2</version>
      <scope>${projectScope}</scope>
    </dependency>

    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.12</version>
      <scope>${projectScope}</scope>
    </dependency>


  </dependencies>

	<!-- ===================================================================== -->

  <build>

    <filters>
      <filter>${basedir}/src/test/resources/test.properties</filter>
      <filter>${basedir}/src/main/resources/application.properties</filter>
    </filters>

    <resources>

		  <!-- kopiowanie mapujących plików Hibernate z pakietu  okl.jspacjent.model -->
      <resource>
        <directory>${basedir}/src/main/java</directory>
        <includes>
          <include>**/*.xml</include>
        </includes>
      </resource>

		  <!--
		  Kopiowanie zasobów ale tak aby :
		  przenieść pliki .xml        w kodowaniu UTF-8      filtrując
		            pliki .properties w kodowaniu ISO-8859-1 filtrując
		  pozostałe pliki bez filtrowania
		  kopiowanie .properties w specjalnym wywołaniu maven-resources-plugin "filter-properties-files"
		  -->
      <resource>
			   <!-- kopiowanie tylko  .xml z filtrowaniem-->
        <directory>${basedir}/src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
			  <!-- kopiowanie pozostałych oprócz .xml i .properties bez filtrowania -->
        <directory>${basedir}/src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/*.xml</exclude>
          <exclude>**/*.properties</exclude>
        </excludes>
      </resource>

    </resources>

    <testResources>
		  <!-- Kopiowanie zasobów testowych jak powyżej -->
      <testResource>
        <directory>${basedir}/src/test/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.xml</include>
        </includes>
      </testResource>
      <testResource>
        <directory>${basedir}/src/test/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/*.xml</exclude>
          <exclude>**/*.properties</exclude>
        </excludes>
      </testResource>

    </testResources>


    <plugins>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <nonFilteredFileExtensions>
            <nonFilteredFileExtension>ico</nonFilteredFileExtension>
            <nonFilteredFileExtension>jar</nonFilteredFileExtension>
            <nonFilteredFileExtension>gif</nonFilteredFileExtension>
            <nonFilteredFileExtension>jpg</nonFilteredFileExtension>
            <nonFilteredFileExtension>css</nonFilteredFileExtension>
          </nonFilteredFileExtensions>
          <encoding>UTF-8</encoding>
        </configuration>

        <executions>

          <execution>
		        <!--
		        Jednak taka sztuczka aby zapisać właściwość w jednym pliku .properties
		        albo w pliku .pom z polskimi znakami i prawidłowo przefiltrować ją do drugiego pliku
		        .properties nie działa?     do pliku .xml działa - 7.09.2013 18:10
		          -->
            <id>filter-properties-files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
		          <!-- java properties files are encoded in ISO-8859-1 so when
		               filtering those files we stick with that encoding. -->
              <encoding>ISO-8859-1</encoding>
              <outputDirectory>${basedir}/target/classes</outputDirectory>
              <resources>
                <resource>
                  <filtering>true</filtering>
                  <directory>${basedir}/src/main/resources</directory>
                  <includes>
                    <include>**/*.properties</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>filter-test-properties-files</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
		          <!-- java properties files are encoded in ISO-8859-1 so when
		               filtering those files we stick with that encoding. -->
              <encoding>ISO-8859-1</encoding>
              <outputDirectory>${basedir}/target/test-classes</outputDirectory>
              <resources>
                <resource>
                  <filtering>true</filtering>
                  <directory>${basedir}/src/test/resources</directory>
                  <includes>
                    <include>**/*.properties</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

        </executions>

      </plugin>

			<!--@author : Marcin Zajączkowski
          How to use TestNG with JUnit together?
          TestNG has a few features which are unavailable or less flexible in JUnit
          (just to mention a few: dependencies between tests and groups of tests
          (irreplaceable for integration tests with long startup), parametrized tests,
          concurrent execution or per suite/group/class init/shutdown operations).
          Therefore it is tempting to migrate existing tests from JUnit to TestNG.
          Having large code base it could be not so easy to migrate all of them at once
          and presented configuration allows to write the new tests in TestNG and rewrite
          the old tests when appropriate.
          Btw, it is worth to mention that thanks to the fact TestNG generates reports also in
          the JUnit’s XML format all the tools compatible with JUnit (Jenkins, Sonar, …)
          will merge test results from JUnit and TestNG and display all of them properly. -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.version}</version>

        <configuration>
          <suiteXmlFiles>
            <suiteXmlFile>
              ${project.build.directory}/test-classes/testng.xml
            </suiteXmlFile>
          </suiteXmlFiles>
	         <!-- <groups>functest,perftest</groups> -->
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit47</artifactId>
            <version>${surefire.version}</version>
          </dependency>

          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-testng</artifactId>
            <version>${surefire.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>false</addClasspath>
              <mainClass>okl.jspacjent.guiswing.JPacjentMDIApplication</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!--
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.4</version>
          <executions>
            <execution>
               <goals>
                 <goal>attached</goal>
               </goals>
               <phase>package</phase>
               <configuration>
                 <descriptorRefs>
                   <descriptorRef>jar-with-dependencies</descriptorRef>
                </descriptorRefs>
                <archive>
                  <manifest>
                    <mainClass>okl.jspacjent.guiswing.JPacjentMDIApplication</mainClass>
                  </manifest>
                </archive>
              </configuration>
           </execution>
        </executions>
      </plugin>
      -->

    </plugins>

    <extensions>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-webdav-jackrabbit</artifactId>
        <version>1.0-beta-7</version>
      </extension>
    </extensions>

  </build>

	<!-- ===================================================================== -->

  <scm>
    <connection>scm:git:git://github.com/jaoss/jspacjent2.git</connection>
    <developerConnection>
      scm:git:git@github.com:jaoss/jspacjent2.git
    </developerConnection>
    <url>http://github.com/jaoss/jspacjent2</url>
  </scm>

  <developers>

    <developer>
      <id>ja</id>
      <name>Janusz Swół</name>
      <email>janusz.swol@gmail.com</email>
      <url></url>
      <organization>jasox.pl</organization>
      <organizationUrl></organizationUrl>
      <roles>
        <role>Manager</role>
        <role>Architect</role>
      </roles>
      <timezone>-1</timezone>
      <properties>
        <picUrl></picUrl>
      </properties>
    </developer>

    <developer>
      <id>jaoss</id>
      <name>Jan Osowski</name>
      <email>jan.osowski@gmail.com</email>
      <url></url>
      <organization>jasox.pl</organization>
      <organizationUrl></organizationUrl>
      <roles>
        <role>Developer</role>
      </roles>
      <timezone>-1</timezone>
      <properties>
        <picUrl></picUrl>
      </properties>
    </developer>

    <developer>
      <id>jasox</id>
      <name>Janusz Janowski</name>
      <email>jasox@gazeta.pl</email>
      <url></url>
      <organization>jasox.pl</organization>
      <organizationUrl></organizationUrl>
      <roles>
        <role>Developer</role>
      </roles>
      <timezone>-1</timezone>
      <properties>
        <picUrl></picUrl>
      </properties>
    </developer>

  </developers>

  <issueManagement>
    <system>Bugzilla</system>
    <url>http://www.bugheaven.com/bugzilla/jasox/</url>
  </issueManagement>

  <profiles>
    <profile>
			  <!-- MySQL runs on the same workstation -->
      <id>local_MySQL</id>
      <properties>
        <dbName>MySQL</dbName>
        <dbHost>localhost</dbHost>
        <dbUser>jasox</dbUser>
        <dbSchema>jspacjent</dbSchema>
        <dbPassword>jasox</dbPassword>
      </properties>
    </profile>

    <profile>
			  <!-- MySQL runs on remote server CloudBees on AWS -->
      <id>aws_MySQL</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <dbName>MySQL</dbName>
        <dbHost>ec2-50-19-213-178.compute-1.amazonaws.com</dbHost>
        <dbUser>jasox</dbUser>
        <dbSchema>jasox-mysql</dbSchema>
        <dbPassword>jasox-01</dbPassword>
      </properties>
    </profile>

  </profiles>


  <distributionManagement>
	 <!-- The “dav” prefix is added before the HTTP protocol, it means deploy your site via WebDAV mechanism.
	      Alternately, you can replace it with “scp” if your server is supported “scp” access.
        Tell Maven to use “wagon-webdav-jackrabbit” extension for deployment. -->
    <repository>
      <id>cloudbees.jasox.repository</id>
      <name>CloudBees Jasox Repository</name>
      <url>dav:https://repository-jasox.forge.cloudbees.com/private/</url>
    </repository>

  </distributionManagement>


</project>
